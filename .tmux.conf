# Ctrl-s prefix key. Default => C-b. Send C-s with repeat option via C-s C-s
set -g prefix C-a
# tell tmux that Prefix+a should send the prefix key to the program running in the current pane so
# that I can still use ctrl-a to jump to start of line
# send https://stackoverflow.com/questions/9684115/howto-go-to-beginning-of-line-in-tmux-after-remapping-prefix-to-ctrla
bind a send-prefix

unbind-key C-b

# Set up the ability go to the front of the line in tmux my c-a a
bind-key C-a send-prefix

bind-key M split-window -h "vim ~/.tmux.conf"

## force a reload of the config file
unbind r
bind r source-file ~/.tmux.conf

# act like vim
setw -g mode-keys vi
bind-key h select-pane -L
bind-key j select-pane -D
bind-key k select-pane -U
bind-key l select-pane -R
bind-key -r C-h select-window -t :-
bind-key -r C-l select-window -t :+


## quick pane cycling
unbind ^A
bind ^A select-pane -t :.+:


set -g base-index 1
set -g renumber-windows on

## improve colors
set -g default-terminal 'screen-256color'

# Status bar content - will be styled by session-specific colors
# Note: Content is set globally, but colors are set per-session

## Keep plenty of history for scrollback
set -g history-limit 50000

# ## address vim mode switching delay (http://superuser.com/a/252717/65504)
set -s escape-time 0

## Smart pane switching with awareness of vim splits
## See this blog post for additional detail:
## http://robots.thoughtbot.com/post/53022241323/seamlessly-navigate-vim-and-tmux-splits
# smart pane switching with awareness of vim splits
bind -n C-h run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-h) || tmux select-pane -L"
bind -n C-j run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-j) || tmux select-pane -D"
bind -n C-k run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-k) || tmux select-pane -U"
bind -n C-l run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-l) || tmux select-pane -R"

## Simplify status bar display.
# move the window status bar to the top of the screen
set-option -g status-position top
set -g status-left-length 40


# DEFAULT STATUS STYLES: Complete default styling for all status bar components
# These are global defaults that sessions inherit unless overridden
set -g status-style "bg=red,fg=white"
set -g status-left-style "bg=red,fg=white"
set -g status-right-style "bg=red,fg=white"
set -g window-status-style "bg=red,fg=white"
set -g window-status-current-style "bg=colour52,fg=white,bold"

set -g status-left '[#S] '
# Status bar shows: [Session] | repo-name:branch* | battery% | date/time
# Git status indicators: * = modified files, + = untracked files, *+ = both
set -g status-right "#{?pane_synchronized,--SYNCED--,} #(~/.tmux/git-status.sh) #(pmset -g batt | grep -o '[0-9]*%')  #(date '+%a, %b %d - %I:%M') "

#######################################################
# SESSION COLOR SWITCHING KEYBOARD SHORTCUTS
# Press Prefix + Shift + letter to quickly change current session colors
# Note: New windows inherit global defaults - navigate to window and press shortcut to fix
#######################################################

# Prefix + Shift+R: Set current session to RED (main session color)
bind-key R set-option status-style "bg=red,fg=white" \; set-option status-left-style "bg=red,fg=white" \; set-option status-right-style "bg=red,fg=white" \; set-option window-status-style "bg=red,fg=white" \; set-option window-status-current-style "bg=colour52,fg=white,bold" \; display-message "Session #{session_name}: RED (main)"

# Prefix + Shift+B: Set current session to BLUE (task-a color)
bind-key B set-option status-style "bg=blue,fg=white" \; set-option status-left-style "bg=blue,fg=white" \; set-option status-right-style "bg=blue,fg=white" \; set-option window-status-style "bg=blue,fg=white" \; set-option window-status-current-style "bg=colour17,fg=white,bold" \; display-message "Session #{session_name}: BLUE (task-a)"

# Prefix + Shift+G: Set current session to GREEN (task-b color)
bind-key G set-option status-style "bg=green,fg=black" \; set-option status-left-style "bg=green,fg=black" \; set-option status-right-style "bg=green,fg=black" \; set-option window-status-style "bg=green,fg=black" \; set-option window-status-current-style "bg=colour22,fg=white,bold" \; display-message "Session #{session_name}: GREEN (task-b)"

# Prefix + Shift+P: Set current session to MAGENTA (task-c color)
bind-key P set-option status-style "bg=magenta,fg=white" \; set-option status-left-style "bg=magenta,fg=white" \; set-option status-right-style "bg=magenta,fg=white" \; set-option window-status-style "bg=magenta,fg=white" \; set-option window-status-current-style "bg=colour53,fg=white,bold" \; display-message "Session #{session_name}: MAGENTA (task-c)"

# Prefix + Shift+Y: Set current session to YELLOW (extra color)
bind-key Y set-option status-style "bg=yellow,fg=black" \; set-option status-left-style "bg=yellow,fg=black" \; set-option status-right-style "bg=yellow,fg=black" \; set-option window-status-style "bg=yellow,fg=black" \; set-option window-status-current-style "bg=colour94,fg=black,bold" \; display-message "Session #{session_name}: YELLOW"

# Prefix + Shift+T: Set current session to CYAN (extra color)
bind-key T set-option status-style "bg=cyan,fg=black" \; set-option status-left-style "bg=cyan,fg=black" \; set-option status-right-style "bg=cyan,fg=black" \; set-option window-status-style "bg=cyan,fg=black" \; set-option window-status-current-style "bg=colour23,fg=white,bold" \; display-message "Session #{session_name}: CYAN"

# Prefix + Shift+D: Reset current session to DEFAULT colors (inherits from global defaults)
bind-key D set-option -u status-style \; set-option -u status-left-style \; set-option -u status-right-style \; set-option -u window-status-style \; set-option -u window-status-current-style \; display-message "Session #{session_name}: DEFAULT"

# USAGE:
# Ctrl-a + Shift+R = Red theme (main)      Ctrl-a + Shift+Y = Yellow theme
# Ctrl-a + Shift+B = Blue theme (task-a)   Ctrl-a + Shift+T = Cyan theme  
# Ctrl-a + Shift+G = Green theme (task-b)  Ctrl-a + Shift+D = Reset to default
# Ctrl-a + Shift+P = Magenta theme (task-c)

# more intuitive keybindings for splitting
 bind | split-window -h -c "#{pane_current_path}"
 bind - split-window -v -c "#{pane_current_path}"

# ## Secondary binding for C-l to retain redraw
bind C-l send-keys 'C-l'

## Reload tmux.conf with prefix-r
bind C-r source-file ~/.tmux.conf \; display "Reloaded ~/.tmux.conf"

# bind resizing of panes to H,J,K,L (resizes by steps of 10 lines/columns)
bind-key J resize-pane -D 5
bind-key K resize-pane -U 5
bind-key H resize-pane -L 5
bind-key L resize-pane -R 5

#######################################################
# iTerm2 Mouse Scrolling Fix for tmux
# If mouse scrolling stops working in tmux with iTerm2, check these settings:
#
# 1. CHECK Profile Terminal settings:
#    iTerm2 Preferences > Profiles > Terminal > Enable "Save lines to scrollback when an app status bar is present"
#    AND ensure "Enable Mouse Reporting" is checked
#
# 2. ENABLE scroll wheel arrow keys in Advanced settings:
#    iTerm2 Preferences > Advanced > Search for "arrow" to find
#    "Scroll wheel sends arrow keys when in alternate screen mode" > Set to "Yes"
#
# 3. OPTIONAL - DISABLE Secure Keyboard Entry:
#    iTerm2 menu > Secure Keyboard Entry (uncheck this option)
#
# Note: You may need to restart iTerm2 for changes to take effect
#######################################################

# Adds the ability to scroll in your tmux panes
set -g mouse on

#######################################################
# VISUAL IMPROVEMENTS FOR ACTIVE PANE IDENTIFICATION
# These settings make it much clearer which pane is currently active
#######################################################

# INACTIVE PANE STYLING: Make inactive panes dimmed/greyed out
# fg=colour247 = light grey text, bg=colour236 = dark grey background
set -g window-style 'fg=colour247,bg=colour236'

# ACTIVE PANE STYLING: Make active pane bright and clear
# fg=default = normal text color, bg=colour234 = slightly darker background
set -g window-active-style 'fg=default,bg=colour234'

# INACTIVE PANE BORDERS: Subtle borders for inactive panes
# fg=colour235 = very dark grey border, bg=colour238 = slightly lighter grey background
set -g pane-border-style 'fg=colour235,bg=colour238'

# ACTIVE PANE BORDERS: Bright, obvious borders for the active pane
# fg=colour51 = bright cyan border, bg=colour236 = dark grey background
set -g pane-active-border-style 'fg=colour51,bg=colour236'

# BORDER ENHANCEMENTS (tmux 3.3+): Make borders even more obvious
# 'heavy' = thicker border lines for better visibility
# Note: If your tmux version is older than 3.3, comment out the next two lines
set -g pane-border-lines heavy


#######################################################
# How to get the nice copy and past from vim, tmux, to and from system #####
# First install the "reattach-to-user-namespace" by running the command: "
# `brew install reattach-to-user-namespace`
# This is the base for the set up https://thoughtbot.com/blog/tmux-copy-paste-on-os-x-a-better-future
# but it is updated because the issue here: https://github.com/tmux/tmux/issues/1242
#######################################################

# Use vim keybindings in copy mode
setw -g mode-keys vi

# Set up 'v' to bein copy selection as in Vim
bind-key -T copy-mode-vi 'v' send -X begin-selection
bind-key -T copy-mode-vi 'y' send -X copy-pipe "reattach-to-user-namespace pbcopy"

# Update default binding of `Enter` to also use copy pipe
unbind -T copy-mode-vi Enter


#######################################################
# SESSION RESTORE AND PERSISTENCE CONFIGURATION
# These plugins save and restore your tmux sessions automatically
#######################################################

set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'

# Restore strategies for different applications
set -g @resurrect-strategy-nvim 'session'    # Restore Neovim sessions
set -g @resurrect-strategy-vim 'session'     # Restore Vim sessions

# AUTOMATIC RESTORE: Enable automatic restore on tmux server start
# This means when you restart your computer and open tmux, it will
# automatically restore all your previous sessions, windows, and panes
set -g @continuum-restore 'on'

# CAPTURE PANE CONTENTS: Save the actual text content of panes
# This preserves what was displayed in each pane, not just the layout
set -g @resurrect-capture-pane-contents 'on'

# AUTOMATIC SAVE INTERVAL: Sessions are saved every 15 minutes by default
# You can change this by adding: set -g @continuum-save-interval '5'
# Manual save: Prefix + Ctrl-s
# Manual restore: Prefix + Ctrl-r


# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'
